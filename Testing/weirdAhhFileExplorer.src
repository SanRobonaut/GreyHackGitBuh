// THIS FILE WAS MOVED AND FURTHER MODIFIED IN /Hacking Tool/modules/file_explorer.src THIS IS SIMPLY LEFT AS A TESTING AND DOCUMENTATION FALLBACK

FileExplorer = {
    "current_dir": null,
    "selected_index": 0,
    "in_action_menu": false,
    "selected_action_index": 0,
    "file_handlers": {},
}

// Utility to get user input
FileExplorer.get_user_input = function(prompt, hide_input = false, single_key = false)
    return user_input(prompt, hide_input, single_key)
end function

// Utility to display text with optional formatting
FileExplorer.display_text = function(text, bold = false, italic = false)
    if bold then text = "<b>" + text + "</b>"
    if italic then text = "<i>" + text + "</i>"
    print(text)
end function

// Determine the type of a file
FileExplorer.file_type = function(file)
    if file.is_folder then return "Folder"
    if file.is_binary then return "Binary"
    if file.is_symlink then return "Symlink"
    return "File"
end function

// Display the current directory and contents
FileExplorer.display_directory = function()
    clear_screen
    self.display_text("Current Directory: " + self.current_dir.path, true)
    self.display_text("Use Arrow Keys or W/A/S/D to navigate, Tab to select, Backspace to go back, Escape to exit", false, true)
    
    items = self.current_dir.get_folders() + self.current_dir.get_files()

    for i in range(0, items.len - 1)
        item = items[i]
        item_name = item.name()
        item_owner = item.owner()
        item_group = item.group()
        item_permissions = item.permissions()
        item_size = item.size()
        item_type = self.file_type(item)

        display_str = item_name + " " + item_owner + " " + item_group + " " + item_permissions + " " + item_size + " " + item_type
        if i == self.selected_index then
            self.display_text(display_str, true)
            if self.in_action_menu then
                item = items[self.selected_index]
                self.display_action_menu(item)
            end if
        else
            self.display_text(display_str)
        end if
    end for
end function

// Display action menu for a selected item
FileExplorer.display_action_menu = function(item)
    actions = self.get_possible_actions(item)
    for i in range(0, actions.len - 1)
        action = actions[i]
        if i == self.selected_action_index then
            self.display_text("  " + action, true)
        else
            self.display_text("  " + action)
        end if
    end for
end function

// Get possible actions for an item
FileExplorer.get_possible_actions = function(item)
    actions = []
    if item.is_folder then
        actions = ["Enter", "Rename", "Delete", "Change Permissions", "Move", "Change Ownership"]
    else
        actions = ["Rename", "Delete", "Change Permissions", "Move", "Change Ownership"]
        if not item.is_binary and not item.is_symlink then
            actions = actions + ["Decipher", "Download", "Modify"]
        end if
    end if
    return actions
end function

FileExplorer.file_handlers["Enter"] = function(folder) // This one is folder only
    FileExplorer.current_dir = folder
    FileExplorer.selected_index = 0
end function

FileExplorer.get_permstring = function(permstring)
    if permstring == "a" then return "ugo+rwx" // internal code for all perms
    return permstring.matches("[ugo]{1,3}([\+\-][rwx]{1,3}){1,2}")
end function

FileExplorer.file_handlers["Change Permissions"] = function(file)
    permstring = ""
    while true
        permstring = user_input("Please input the new permissions. (eg. ug+rx)" + char(10) + """a"" for all perms. ""quit"" to quit. >").lower
        if permstring == "quit" then return
        
        permstring = FileExplorer.get_permstring(permstring)
        if not permstring == "" then break
    end while

    // CUSTOM CHMOD PROCESSOR
    // strings can be of format [ugo]{1,3}([\+\-][rwx]{1,3}){1,2}
    // i.e: ug+rx-w | u+r | g+r-x | o-w+r

    segments = permstring.split("[+-]")
    if segments.len < 2 then return
    target = segments[0]
    segments.remove(0)

    offset = target.len
    for segment in segments
        operator = permstring[offset]
        offset = offset + segment.len + 1 // increment by length of current segment plus the operator

        for i in target
            out = file.chmod(i + operator + segment, file.is_folder)
        end for
    end for
end function

FileExplorer.file_handlers["Rename"] = function(file)

end function

FileExplorer.file_handlers["Delete"] = function(file)

end function

FileExplorer.file_handlers["Change Permissions"] = function(file)

end function

FileExplorer.file_handlers["Move"] = function(file)

end function

FileExplorer.file_handlers["Change Ownership"] = function(file)

end function

// FILE ONLY
FileExplorer.file_handlers["Decipher"] = function(file) 

end function

FileExplorer.file_handlers["Download"] = function(file)

end function

FileExplorer.file_handlers["Modify"] = function(file)

end function


// Main function to start the file explorer
FileExplorer.run = function(starting_dir)
    self.current_dir = starting_dir
    while true
        self.display_directory()
        items = self.current_dir.get_folders() + self.current_dir.get_files()
        
        key = self.get_user_input(" ", false, true)
        if key == "UpArrow" or key == "w" then
            if not self.in_action_menu then
                self.selected_index = (self.selected_index - 1) % items.len
                if self.selected_index < 0 then self.selected_index = items.len - 1
            else
                item = items[self.selected_index]
                self.selected_action_index = (self.selected_action_index - 1) % self.get_possible_actions(item).len
                if self.selected_action_index < 0 then self.selected_action_index = self.get_possible_actions(item).len - 1
            end if
        end if
        if key == "DownArrow" or key == "s" then
            if not self.in_action_menu then
                self.selected_index = (self.selected_index + 1) % items.len
            else
                item = items[self.selected_index]
                self.selected_action_index = (self.selected_action_index + 1) % self.get_possible_actions(item).len
            end if
        end if
        if key == "Tab" then
            if self.in_action_menu then
                item = items[self.selected_index]
                actions = self.get_possible_actions(item)
                action = actions[self.selected_action_index]
                self.file_handlers[action](item)
                self.in_action_menu = false
            else
                self.in_action_menu = true
            end if
        end if
        if key == "Backspace" then
            if self.in_action_menu then
                self.in_action_menu = false
            else
                parent_dir = self.current_dir.parent()
                if parent_dir != null then
                    self.current_dir = parent_dir
                    self.selected_index = 0
                end if
            end if
        end if
        if key == "Escape" then
            exit()
        end if
    end while
end function

// Start the file explorer with the root directory
root_dir = get_shell.host_computer.File("/")
FileExplorer.run(root_dir)