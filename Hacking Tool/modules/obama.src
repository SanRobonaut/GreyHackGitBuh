// DEBUG: REMOVE FIRST 3 LINES OF CODE AND LAST LINE
import_code("/Hacking Tool/modules/ui_helpers.src")
import_code("/Hacking Tool/modules/database.src")
import_code("/Hacking Tool/modules/file_explorer.src")
include = function(libname)
    if include_lib(libname) != null then return include_lib(path)
    
    comp = get_shell.host_computer

    find = function(filename, folder)
        for i in folder.get_files
            if i.name == filename then return i
        end for

        for i in folder.get_folders
            res = find(filename, i)
            if res != null then return res
        end for

        return null
    end function

    return include_lib(find(libname, comp.File("/")).path)
end function

metaxploit = include("metaxploit.so")
if metaxploit == null then exit("<color=red>metaxploit.so could not be located!")

crypto = include("crypto.so")
if crypto == null then exit("<color=red>crypto.so could not be located!")
actions = {}
// END OF TOP DEBUG

VULN_DATABASE_PATH = home_dir + "/vuln_db"

find_vulns = function(lib, vulns)
    libkey = libname + "-" + libversion

    vulns[libkey] = {}
    vulns[libkey].vuln_areas = {}
    areas = metaxploit.scan(lib)

    for address in areas
        scanAddress = metaxploit.scan_address(lib, address)
        segments = scanAddress.split("Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = segment.indexOf("<b>")
            labelEnd = segment.indexOf("</b>")
            exploits.push(segment[labelStart + 3: labelEnd])
        end for

        vulns[libkey].vuln_areas[address] = exploits
    end for

    return vulns
end function

hack_lib = function(lib, vulns = {})
    libname = lib.lib_name
    libversion = lib.version

    libkey = libname + "-" + libversion

    if not vulns.hasIndex(libkey) then
        vulns = find_vulns(lib, vulns)
        db.set_data(vulns, VULN_DATABASE_PATH)
    end if

    extra = user_input(["Extra overflow arg?", ">".bold].join(" "))

    results = {}
    results.total_len = 0
    results["string"] = []
    results["number"] = []
    results["shell"] = []
    results["computer"] = []
    results["file"] = []

    vuln_areas = vulns[libkey].vuln_areas.indexes
    for area in vuln_areas
        exploits = vulns[libkey].vuln_areas[area]
        for exploit in exploits
            res = lib.overflow(area, exploit, extra)
            if not res == null then
                results[typeof(res).lower].push(res)
                results.total_len = results.total_len + 1
            end if
        end for
    end for

    return results
end function

eval_result = function(res, type)
    eval_funcs = {}
    eval_funcs["string"] = function(x)
        user_input(x, false, true)
    end function
    eval_funcs["number"] = function(x)
        user_input(x, false, true)
    end function
    eval_funcs["shell"] = function(x)
        x.start_terminal
    end function
    eval_funcs["computer"] = function(x) // TODO: Add feature to (when you have root) create or delete users, change passwords, and (without root) monitor and close processes
        FileExplorer.run(x.File("/"))
    end function
    eval_funcs["file"] = function(x)
        while x.path != "/"
            if x.parent == null then break
            x = x.parent
        end while

        FileExplorer.run(x)
    end function
    // TODO: IDK ob exiting out of file explorer works properly usw might need to check uwu
    eval_funcs[type](res)
end function

eval_results = function(results)
    select_result = function(results)
        display_funcs = {}
        display_funcs["string"] = function(x)
            return x
        end function

        display_funcs["number"] = function(x)
            return str(x)
        end function

        display_funcs["shell"] = function(x)
            return x.host_computer.public_ip + " | " + x.host_computer.local_ip
        end function

        display_funcs["computer"] = function(x)
            return x.public_ip + " | " + x.local_ip
        end function

        display_funcs["file"] = function(x)
            if not x.is_folder then return x.path + "/" + x.name
            return x.path
        end function

        return select_from_map(results, display_funcs)
    end function

    while true
        selected = select_result(results)
        type = selected[1]
        result = selected[0]
        
        clear_screen
        eval_result(result, type)

        key = ""
        print("Select another result? (Y/n) >")
        while not "Öyn".indexOf(key) // Ö for fun
            key = user_input("", false, true).lower
        end while

        if key == "n" then break
    end while
end function

actions.hack = function()
    comp = get_shell.host_computer
    if not comp.is_network_active then return show_error("Computer has no internet access!")
    vulns = db.read_data(VULN_DATABASE_PATH)
    if vulns == null then 
        show_error("Malformed vuln database! Overwriting previous values...", true, false)
        vulns = {}
        db.write_data(vulns, VULN_DATABASE_PATH)
    end if
    
    ip = input_ip("Please input an IP to hack")
    if ip == null then return

    clear_screen

    isLanIp = is_lan_ip(ip)
    if isLanIp then
        router = get_router
    else 
        router = get_router(ip)
    end if

    if router == null then return show_error("No router found at the given ip!")

    ports = null
    if not isLanIp then
        ports = router.used_ports
    else
        ports = router.device_ports(ipAddress)
    end if

    if ports == null then return show_error("Cannot get ports at ip")
    if typeof(ports) == "string" then return show_error("Got Error whilst trying to get ports: " + ports)
    // if ports.len <= 0 then return show_error("Got empty list of ports") // can still continue even without any ports (hacking the router)
    ports.push(0)

    display_port = function(port)
        if typeof(port) == "port" then
            service_info = router.port_info(port)
            lan_ip = port.get_lan_ip
            port_status = "Open"
            
            if(port.is_closed and not isLanIp) then
                port_status = "Closed"
            end if

            return str(port.port_number + " " + port_status + " " + service_info + " " + lan_ip)
        else // number 0 for router
            // PORT STATE SERVICE VERSION LAN
            return router.essid_name + " Open kernel_router.so " + router.kernel_version + " " + router.local_ip
        end if
    end function

    while true
        selected_port = select_from_list(ports, true, 0, @display_port, "> Select a port to hack", "PORT STATE SERVICE VERSION LAN".bold.mark(rgba_to_hex(0, 0, 0, 0.05 * 255)))
        clear_screen

        net_session = null
        if selected_port == 0 then
            net_session = metaxploit.net_use(ip)
        else
            net_session = metaxploit.net_use(ip, port.port_number)
        end if

        if not net_session then return show_error("Could not establish net_session!", true, false)

        lib = net_session.dump_lib
        results = hack_lib(lib)

        eval_results(results)

        key = ""
        print("Hack another port? (Y/n) >")
        while not "Öyn".indexOf(key) // Ö for fun
            key = user_input("", false, true).lower
        end while

        if key == "n" then break
    end while
end function

actions.scan = function()
    print("Scanned")
end function

actions.scanlan = function()
    print("Scanned lan network")
end function

actions.privesc = function()
    print("Privesced")
end function

actions.autohack = function()
    print("Autobanked")
end function

// DEBUG: REMOVE THIS
actions.hack