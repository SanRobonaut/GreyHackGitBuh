VULN_DATABASE_PATH = home_dir + "/vuln_db"

find_vulns = function(lib, vulns)
    libkey = lib.lib_name + "-" + lib.version

    vulns[libkey] = {}
    vulns[libkey].vuln_areas = {}
    areas = metaxploit.scan(lib)

    for address in areas
        scanAddress = metaxploit.scan_address(lib, address)
        segments = scanAddress.split("Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = segment.indexOf("<b>")
            labelEnd = segment.indexOf("</b>")
            exploits.push(segment[labelStart + 3: labelEnd])
        end for

        vulns[libkey].vuln_areas[address] = exploits
    end for

    return vulns
end function

hack_lib = function(lib, vulns = {})
    if not vulns then vulns = {}

    libname = lib.lib_name
    libversion = lib.version

    libkey = libname + "-" + libversion

    if not vulns.hasIndex(libkey) then
        vulns = find_vulns(lib, vulns)
        db.set_data(vulns, VULN_DATABASE_PATH)
    end if

    extra = user_input(["Extra overflow arg?", ">".bold].join(" "))

    results = {}
    // results.total_len = 0
    results["string"] = []
    results["number"] = []
    results["shell"] = []
    results["computer"] = []
    results["file"] = []

    vuln_areas = vulns[libkey].vuln_areas.indexes
    
    saved_exploits = {}
    saved_exploits.strings = []
    saved_exploits.numbers = []

    for area in vuln_areas
        exploits = vulns[libkey].vuln_areas[area]
        for exploit in exploits
            res = lib.overflow(area, exploit, extra)
            if not res == null then
                if typeof(res) == "string" then saved_exploits.strings.push(area + "|||" + exploit)
                if typeof(res) == "number" and not res == 0 then saved_exploits.numbers.push(area + "|||" + exploit)

                results[typeof(res).lower].push(res)
                // results.total_len = results.total_len + 1
            end if
        end for
    end for

    if saved_exploits.strings.len > 0 then
        clear_screen
        print("String returns: ".color(colors.info).size(150))
        for exploit in saved_exploits.strings
            area = exploit.split("|||")[0]
            vuln = exploit.split("|||")[1]

            print(lib.overflow(area, vuln, extra))
        end for
        user_input(" ", false, true)
    end if

    if saved_exploits.numbers.len > 0 then
        clear_screen
        print("Number returns: ".color(colors.info).size(150))
        for exploit in saved_exploits.numbers
            area = exploit.split("|||")[0]
            vuln = exploit.split("|||")[1]

            print(lib.overflow(area, vuln, extra))
        end for
        user_input(" ", false, true)
    end if

    return results
end function

eval_result = function(res, type)
    eval_funcs = {}
    eval_funcs["string"] = function(x)
        user_input(x, false, true)
    end function
    eval_funcs["number"] = function(x)
        user_input(str(x), false, true)
    end function
    eval_funcs["shell"] = function(x)
        x.start_terminal
    end function
    eval_funcs["computer"] = function(x)
        FileExplorer.run(x.File("/"))
    end function
    eval_funcs["file"] = function(x)
        while x.path != "/"
            if x.parent == null then break
            x = x.parent
        end while

        FileExplorer.run(x)
    end function
    eval_funcs[type](res)
end function

eval_results = function(results)
    select_result = function(results)
        display_funcs = {}
        display_funcs["string"] = function(x)
            return x
        end function

        display_funcs["number"] = function(x)
            return str(x)
        end function

        display_funcs["shell"] = function(x)
            return x.host_computer.public_ip + " | " + x.host_computer.local_ip + " | " + getUser(x)
        end function

        display_funcs["computer"] = function(x)
            return x.public_ip + " | " + x.local_ip + " | " + getUser(x)
        end function

        display_funcs["file"] = function(x)
            if not x.is_folder then return x.path + "/" + x.name + " | " + getUser(x)
            return x.path + " | " + getUser(x)
        end function

        return select_from_map(results, display_funcs)
    end function

    if results.len == 0 then
        print("Sorry, but there were no results obtained.".color(colors.purple))
        return user_input(" ", false, true)
    end if

    while true
        selected = select_result(results)
        type = selected[1]
        result = selected[0]
        
        clear_screen
        eval_result(result, type)

        key = ""
        print("Select another result? (Y/n) >".size(120).bold)
        while not "Öyn".indexOf(key) // Ö for fun
            key = user_input(" ", false, true).lower
        end while

        if key == "n" then break
    end while
end function

actions.hack = function()
    comp = get_shell.host_computer
    if not comp.is_network_active then return show_error("Computer has no internet access!")
    vulns = db.read_data(VULN_DATABASE_PATH)
    if vulns == null then 
        show_error("Malformed vuln database! Overwriting previous values...", true, false)
        vulns = {}
        db.write_data(vulns, VULN_DATABASE_PATH)
    end if
    
    ip = input_ip("Please input an IP to hack")
    if ip == null then return

    clear_screen

    isLanIp = is_lan_ip(ip)
    if isLanIp then
        router = get_router
    else 
        router = get_router(ip)
    end if

    if router == null then return show_error("No router found at the given ip!")

    ports = null
    if not isLanIp then
        ports = router.used_ports
    else
        ports = router.device_ports(ip)
    end if

    if ports == null then return show_error("Cannot get ports at ip")
    if typeof(ports) == "string" then return show_error("Got Error whilst trying to get ports: " + ports)
    // if ports.len <= 0 then return show_error("Got empty list of ports") // can still continue even without any ports (hacking the router)
    ports.push(0)

    setColorFunc = function(x)
        return x.color(colors.info)
    end function

    setColorTealFunc = function(x)
        return str(x).color(colors.teal)
    end function

    setColorPrimaryFunc = function(x)
        return str(x).color(colors.primary)
    end function

    display_port = function(port)
        if typeof(port) == "port" then
            service_info = router.port_info(port).trim
            service_name = service_info.split(" ")[0]
            version = service_info.split(" ")[1]
            lan_ip = port.get_lan_ip.trim
            port_status = "Open"
            
            if(port.is_closed and not isLanIp) then
                port_status = "Closed"
            end if

            return [port.port_number, port_status, service_name, version, lan_ip].map(@setColorTealFunc).join(" ")
        else // number 0 for router
            return [router.essid_name, "Open", "kernel_router.so", router.kernel_version, router.local_ip].map(@setColorPrimaryFunc).join(" ")
        end if
    end function

    while true
        selected_port = select_from_list(ports, true, 0, @display_port, 
                                         "> Select a port to hack",
                                         ["PORT", "STATE", "SERVICE", "VERSION", "LAN"].map(@setColorFunc).join(" "))
        clear_screen

        net_session = null
        if selected_port == 0 then
            net_session = metaxploit.net_use(ip)
        else
            net_session = metaxploit.net_use(ip, selected_port.port_number)
        end if

        if not net_session then return show_error("Could not establish net_session!", true, false)

        lib = net_session.dump_lib
        results = hack_lib(lib, vulns)

        eval_results(results)

        clear_screen
        key = ""
        print("Hack another port? (Y/n) >".size(120).bold)
        while not "Öyn".indexOf(key) // Ö for fun
            key = user_input(" ", false, true).lower
        end while

        if key == "n" then break
    end while
end function

actions.scan = function()
    comp = get_shell.host_computer
    if not comp.is_network_active then return show_error("Computer has no internet access!")
    
    ip = input_ip("Please input an IP to scan")
    if ip == null then return

    clear_screen

    isLanIp = is_lan_ip(ip)
    if isLanIp then
        router = get_router
    else 
        router = get_router(ip)
    end if

    if router == null then return show_error("No router found at the given ip!")

    ports = null
    if not isLanIp then
        ports = router.used_ports
    else
        ports = router.device_ports(ip)
    end if

    if ports == null then return show_error("Cannot get ports at ip")
    if typeof(ports) == "string" then return show_error("Got Error whilst trying to get ports: " + ports)

    setColorFunc = function(x)
        return x.color(colors.info)
    end function

    setColorTealFunc = function(x)
        return str(x).color(colors.teal)
    end function

    setColorPrimaryFunc = function(x)
        return str(x).color(colors.primary)
    end function

    info = ["PORT", "STATE", "SERVICE", "VERSION", "LAN"].map(@setColorFunc).join(" ").bold
    for port in ports
        service_info = router.port_info(port).trim
        service_name = service_info.split(" ")[0]
        version = service_info.split(" ")[1]
        lan_ip = port.get_lan_ip.trim
        port_status = "Open"
        
        if(port.is_closed and not isLanIp) then
            port_status = "Closed"
        end if

        line = [port.port_number, port_status, service_name, version, lan_ip].map(@setColorTealFunc).join(" ")
        info = info + char(10) + line
    end for

    line = [router.essid_name, "Open", "kernel_router.so", router.kernel_version, router.local_ip].map(@setColorPrimaryFunc).join(" ")
    info = info + char(10) + line

    print("Port info".bold.color(colors.info))
    print(format_columns(info))
    print("---".color(colors.tertiary))
    print(char(10) + "Whois info".bold.color(colors.info))

    adminInfo = whois(ip)
    if isLanIp then adminInfo = whois(router.public_ip)

    infoLines = adminInfo.split(char(10))
    infoObject = {}
    infoObject.domainName = infoLines[0].split(":")[1].trim
    infoObject.administrativeContact = infoLines[1].split(":")[1].trim
    infoObject.emailAddress = infoLines[2].split(":")[1].trim
    infoObject.phone = infoLines[3].split(":")[1].trim
    
    for i in range(0, infoObject.indexes.len - 1)
        color = colors.mix(colors.teal, colors.green, i / (infoObject.indexes.len - 1))
        print([infoObject.indexes[i], ": ", infoObject[infoObject.indexes[i]]].join(" ").color(color))
    end for

    print("---".color(colors.tertiary))
    print(char(10) + "Firewall info".bold.color(colors.info))

    rules = router.firewall_rules
    info = ["Action".color(colors.yellow), "Port".color(colors.pink), "Source".color(colors.blue), "Destination".color(colors.green)].join(" ")
    for rule in rules
        rule = rule.split(" ")
        line = [rule[0].color(colors.yellow), rule[1].color(colors.pink), rule[2].color(colors.blue), rule[3].color(colors.green)].join(" ")
        info = info + char(10) + line
    end for

    if rules.len == 0 then info = "No Firewall rules!".color(colors.warn)
    print(format_columns(info))
    user_input(" ", false, true)
end function

actions.scanlan = function()
    print("Scanned lan network")
end function

actions.privesc = function()
    print("Privesced")
end function

actions.autohack = function()
    print("Autobanked")
end function

actions.exit = function()
    exit()
end function