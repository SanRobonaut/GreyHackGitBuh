import_code("/Hacking Tool/modules/ui_helpers.src")
import_code("/Hacking Tool/modules/database.src")
actions = {}

VULN_DATABASE_PATH = home_dir + "/vuln_db"

find_vulns = function(lib, vulns)
    libkey = libname + "-" + libversion

    vulns[libkey] = {}
    vulns[libkey].vuln_areas = {}
    areas = metaxploit.scan(lib)

    for address in areas
        scanAddress = metaxploit.scan_address(lib, address)
        segments = scanAddress.split("Unsafe check: ")[1:]
        exploits = []

        for segment in segments
            labelStart = segment.indexOf("<b>")
            labelEnd = segment.indexOf("</b>")
            exploits.push(segment[labelStart + 3: labelEnd])
        end for

        vulns[libkey].vuln_areas[address] = exploits
    end for

    return vulns
end function

hack_lib = function(lib, vulns = {})
    libname = lib.lib_name
    libversion = lib.version

    libkey = libname + "-" + libversion

    if not vulns.hasIndex(libkey) then
        vulns = find_vulns(lib, vulns)
        db.set_data(vulns, VULN_DATABASE_PATH)
    end if

    extra = user_input(["Extra overflow arg?", ">".bold].join(" "))

    results = []
    vuln_areas = vulns[libkey].vuln_areas.indexes
    for area in vuln_areas
        exploits = vulns[libkey].vuln_areas[area]
        for exploit in exploits
            results.push(lib.overflow(area, exploit, extra))
        end for
    end for

    return results
end function

actions.hack = function()
    comp = get_shell.host_computer
    if not comp.is_network_active then return show_error("Computer has no internet access!")
    vulns = db.read_data(VULN_DATABASE_PATH)
    if vulns == null then 
        show_error("Malformed vuln database! Overwriting previous values...", true, false)
        vulns = {}
        db.write_data(vulns, VULN_DATABASE_PATH)
    end if
    
    ip = input_ip("Please input an IP to hack")
    if ip == null then return

    clear_screen

    isLanIp = is_lan_ip(ip)
    if isLanIp then
        router = get_router
    else 
        router = get_router(ip)
    end if

    if router == null then return show_error("No router found at the given ip!")

    ports = null
    if not isLanIp then
        ports = router.used_ports
    else
        ports = router.device_ports(ipAddress)
    end if

    if ports == null then return show_error("Cannot get ports at ip")
    if typeof(ports) == "string" then return show_error("Got Error whilst trying to get ports: " + ports)
    // if ports.len <= 0 then return show_error("Got empty list of ports") // can still continue even without any ports (hacking the router)
    ports.push(0)

    display_port = function(port)
        if typeof(port) == "port" then
            service_info = router.port_info(port)
            lan_ip = port.get_lan_ip
            port_status = "Open"
            
            if(port.is_closed and not isLanIp) then
                port_status = "Closed"
            end if

            return str(port.port_number + " " + port_status + " " + service_info + " " + lan_ip)
        else // number 0 for router
            // PORT STATE SERVICE VERSION LAN
            return router.essid_name + " Open kernel_router.so " + router.kernel_version + " " + router.local_ip
        end if
    end function

    selected_port = select_from_list(ports, true, 0, @display_port, "> Select a port to hack", "PORT STATE SERVICE VERSION LAN".bold.mark(rgba_to_hex(0, 0, 0, 0.05 * 255)))
    clear_screen

    if selected_port == 0 then
        net_session = metaxploit.net_use(ip)
        
        lib = net_session.dump_lib
    else
        // hack port
    end if
end function

actions.scan = function()
    print("Scanned")
end function

actions.scanlan = function()
    print("Scanned lan network")
end function

actions.privesc = function()
    print("Privesced")
end function

actions.autohack = function()
    print("Autobanked")
end function

actions.hack