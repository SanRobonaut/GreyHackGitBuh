FileExplorer = {
    "current_dir": null,
    "selected_index": 0,
    "in_action_menu": false,
    "selected_action_index": 0,
    "file_handlers": {},
}

// Utility to get user input
FileExplorer.get_user_input = function(prompt, hide_input = false, single_key = false)
    return user_input(prompt, hide_input, single_key)
end function

// Determine the type of a file
FileExplorer.file_type = function(file)
    if not typeof(file).lower == "file" then return "Unknown"
    if file.is_folder then return "Folder"
    if file.is_binary then return "Binary"
    //if file.is_symlink then return "Symlink"
    return "File"
end function

// Display the current directory and contents
FileExplorer.display_directory = function()
    clear_screen
    print(("Current Directory: " + str(self.current_dir.path).bold).color(colors.info))
    print("Use Arrow Keys or W/A/S/D to navigate, Tab to select, Backspace to go back, Escape to exit".italic.color(colors.info))
    
    items = self.current_dir.get_folders() + self.current_dir.get_files()
    if items.len <= 0 then
        print("Nothing in here :c".color(colors.secondary))
        return
    end if

    type_colors = {}
    type_colors["File"] = colors.yellow
    type_colors["Folder"] = colors.blue
    type_colors["Binary"] = colors.green
    type_colors["Unknown"] = colors.gray

    for i in range(0, items.len - 1)
        item = items[i]
        item_name = item.name()
        item_owner = item.owner()
        item_group = item.group()
        item_permissions = item.permissions()
        item_size = item.size()
        item_type = self.file_type(item)

        display_str = item_name.color(colors.blue) + " " + item_owner.color(colors.teal) + " " + item_group.color(colors.teal) + " " + item_permissions.color(colors.indigo) + " " + item_size.color(colors.text) + " " + item_type.color(type_colors[item_type])
        if i == self.selected_index then
            print(display_str.bold.mark(colors.rgba_to_hex(255, 255, 255, 0.2 * 255)))
            if self.in_action_menu then
                item = items[self.selected_index]
                self.display_action_menu(item)
            end if
        else
            print(display_str)
        end if
    end for
end function

// Display action menu for a selected item
FileExplorer.display_action_menu = function(item)
    actions = self.get_possible_actions(item)
    for i in range(0, actions.len - 1)
        action = actions[i]
        if i == self.selected_action_index then
            print(("  " + action).bold.color(colors.blue))
        else
            print("  " + action.color(colors.purple))
        end if
    end for
end function

// Get possible actions for an item
FileExplorer.get_possible_actions = function(item)
    actions = []
    if item.is_folder then
        actions = ["Enter", "Rename", "Delete", "Change Permissions", "Move", "Change Owner"]
    else
        actions = ["Rename", "Delete", "Change Permissions", "Move", "Change Owner"]
        //if not item.is_binary and not item.is_symlink then
        if not item.is_binary then
                actions = actions + ["Read", "Download", "Modify", "Decipher"]
        end if
    end if
    return actions
end function

FileExplorer.file_handlers["Enter"] = function(folder) // This one is folder only
    FileExplorer.current_dir = folder
    FileExplorer.selected_index = 0
end function

FileExplorer.get_permstring = function(permstring)
    if permstring == "a" then return "ugo+rwx" // internal code for all perms
    return permstring.matches("[ugo]{1,3}([\+\-][rwx]{1,3}){1,2}")
end function

FileExplorer.file_handlers["Change Permissions"] = function(file)
    print(char(10) * 2)

    permstring = ""
    while true
        permstring = user_input("Please input the new permissions. (eg. ug+rx)" + char(10) + """a"" for all perms. ""quit"" to quit. >").lower
        if permstring == "quit" then return
        
        permstring = FileExplorer.get_permstring(permstring)
        if not permstring == "" then break
    end while

    // CUSTOM CHMOD PREPROCESSOR
    // strings can be of format [ugo]{1,3}([\+\-][rwx]{1,3}){1,2}
    // i.e: ug+rx-w | u+r | g+r-x | o-w+r

    if not typeof(permstring) == "string" then permstring = permstring[0]
    segments = permstring.split("[+-]")
    if segments.len < 2 then return
    target = segments[0]
    segments.remove(0)

    offset = target.len
    for segment in segments
        operator = permstring[offset]
        offset = offset + segment.len + 1 // increment by length of current segment plus the operator

        for i in target
            out = file.chmod(i + operator + segment, file.is_folder)
            if not out == "" then
                return show_error("Chmod error: " + out)
            end if
        end for
    end for
    user_input("Successfully updated file permissions!", false, true)
end function

FileExplorer.file_handlers["Rename"] = function(file)
    print
    print

    newName = user_input("Please input the new file name. >")
    err = file.rename(newName)
    if typeof(err) == "string" and err != "" then return show_error("Rename error: " + err)
    user_input("Successfully renamed to " + file.name + "!", false, true)
end function

FileExplorer.file_handlers["Delete"] = function(file)
    err = file.delete
    if not err == "" then return show_error("Delete error: " + err)
    user_input("Successfully deleted file!", false, true)
end function

FileExplorer.file_handlers["Move"] = function(file)
    print
    print

    newPath = user_input("Please input the new file path. >")
    err = file.move(newPath, file.name)
    if typeof(err) == "string" and err != "" then return show_error("Move error: " + err)
    user_input("Successfully changed path to " + newPath + "!", false, true)
end function

FileExplorer.file_handlers["Change Owner"] = function(file)
    print
    print

    newOwner = user_input("Please input the new file owner's name. >")
    err = file.set_owner(newOwner, true)
    if typeof(err) == "string" and err != "" then return show_error("Set Owner error: " + err)
    user_input("Successfully changed owner to " + newOwner + "!", false, true)
end function

FileExplorer.file_handlers["Change Group"] = function(file)
    print
    print

    newGroup = user_input("Please input the new file group's name. >")
    err = file.set_group(newGroup, true)
    if typeof(err) == "string" and err != "" then return  show_error("Set Group error: " + err)
    user_input("Successfully changed group to " + newGroup + "!", false, true)
end function

// FILE ONLY
FileExplorer.file_handlers["Decipher"] = function(file) 
    enc = file.get_content.split(":")[1]
    dec = crypto.decipher(enc)

    print
    print
    user_input("Deciphered! " + file.get_content.split(":")[0] + ":" + dec, false, true)
end function

FileExplorer.file_handlers["Download"] = function(file)
    content = file.get_content
    comp = get_shell.host_computer
    
    err = comp.touch(home_dir, "DL_" + file.name)
    if typeof(err) == "string" and err != "" then
        return show_error("Download error! Couldn't create local file: " + err)
    else
        filePath = home_dir + "/DL_" + file.name
        comp.File(filePath).set_content(content)

        user_input("Successfully downloaded file to " + filePath + "!", false, true)
    end if
end function

FileExplorer.file_handlers["Modify"] = function(file)
    clear_screen
    comp = get_shell.host_computer
    
    print("Creating local input file...".color(colors.info).size(200))
    temp_file_name = "OBAMA_INPUTFILE.txt"
    temp_file_path = home_dir + "/" + temp_file_name
    err = comp.touch(home_dir, temp_file_name)

    if typeof(err) == "string" and err != "" then
        return show_error("Modify error! Couldn't create local file: " + err)
    else
        print(["Created temporary input file. Go to", temp_file_path.italic, "to edit contents. Resume this program once you have written all of the new contents."].join(" ").bold.size("200%").color(colors.info))
        user_input("")

        content = comp.File(temp_file_path).get_content
        comp.File(temp_file_path).delete
        err = file.set_content(content)

        if typeof(err) == "string" and err != "" then
            return show_error("Modify error! Couldn't write to remote file: " + err)
        else if err == 0 then
            return show_error("Modify error! Couldn't write to remote file!")
        end if

        user_input("Successfully modified remote file!", false, true)
    end if
end function

FileExplorer.file_handlers["Read"] = function(file) 
    clear_screen
    print(file.get_content)

    user_input(" ", false, true)
end function

// Main function to start the file explorer
FileExplorer.run = function(starting_dir)
    self.current_dir = starting_dir
    while true
        self.display_directory()
        items = self.current_dir.get_folders() + self.current_dir.get_files()
        
        key = self.get_user_input(" ", false, true)
        if key == "UpArrow" or key == "w" then
            if not self.in_action_menu then
                self.selected_index = (self.selected_index - 1) % items.len
                if self.selected_index < 0 then self.selected_index = items.len - 1
            else
                item = items[self.selected_index]
                self.selected_action_index = (self.selected_action_index - 1) % self.get_possible_actions(item).len
                if self.selected_action_index < 0 then self.selected_action_index = self.get_possible_actions(item).len - 1
            end if
        end if
        if key == "DownArrow" or key == "s" then
            if not self.in_action_menu then
                self.selected_index = (self.selected_index + 1) % items.len
            else
                item = items[self.selected_index]
                self.selected_action_index = (self.selected_action_index + 1) % self.get_possible_actions(item).len
            end if
        end if
        if key == "Tab" then
            if items.len == 0 then continue
            if self.in_action_menu then
                item = items[self.selected_index]
                actions = self.get_possible_actions(item)
                action = actions[self.selected_action_index]
                self.file_handlers[action](item)
                self.in_action_menu = false
            else
                self.in_action_menu = true
            end if
        end if
        if key == "Backspace" then
            if self.in_action_menu then
                self.in_action_menu = false
            else
                parent_dir = self.current_dir.parent()
                if parent_dir != null then
                    self.current_dir = parent_dir
                    self.selected_index = 0
                end if
            end if
        end if
        if key == "Escape" then
            return
        end if
    end while
end function